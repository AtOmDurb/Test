require('dotenv').config();
const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const pool = require('./config/db');


const app = express();

// Middleware
app.use(cors({
  origin: 'http://localhost:3000',
  credentials: true,
  allowedHeaders: ['Authorization', 'Content-Type']
}));
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤
const authRoutes = require('./routes/auth');
const adminRoutes = require('./routes/admin');
const teacherRoutes = require('./routes/teacher');
const studentRoutes = require('./routes/student');
const adminRouter = require('./routes/admin');



app.use('/api/admin', adminRouter);
app.use('/api/admin', require('./routes/admin'));
app.use('/api/auth', authRoutes);
app.use('/api/admin', adminRoutes);
app.use('/api/teacher', teacherRoutes);
app.use('/api/student', studentRoutes);

(async () => {
  try {
    const [rows] = await pool.query('SELECT 1 + 1 AS result');
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:', rows[0].result);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', err.message);
    process.exit(1);
  }
})();


// 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
const staticPath = path.join(__dirname, 'public');
if (!fs.existsSync(staticPath)) {
  console.warn('‚ö†Ô∏è –ü–∞–ø–∫–∞ public/ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –Ω–µ –±—É–¥—É—Ç –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å—Å—è');
} else {
  app.use(express.static(staticPath));
  console.log('‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ public/ –¥–æ—Å—Ç—É–ø–Ω—ã');
}

// 3. –û—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
app.get('/', (req, res) => {
  res.send(`
    <h1>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç</h1>
    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:</p>
    <ul>
      <li><a href="/api/status">–°—Ç–∞—Ç—É—Å API</a></li>
      <li><a href="/health">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è</a></li>
    </ul>
  `);
});

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK',
    timestamp: new Date(),
    uptime: process.uptime(),
    db: pool.pool ? 'connected' : 'disconnected'
  });
});

// 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
app.get('/api/status', (req, res) => {
  res.json({
    message: 'API —Ä–∞–±–æ—Ç–∞–µ—Ç',
    endpoints: {
      auth: '/api/auth/login',
      admin: '/api/admin',
      teacher: '/api/teacher'
    }
  });
});

// 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ 404
app.use((req, res) => {
  res.status(404).send(`
    <h1>404 Not Found</h1>
    <p>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π URL ${req.url} –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
    <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
  `);
});

// 7. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞:', err.stack);
  res.status(500).json({ 
    error: 'Internal Server Error',
    message: process.env.NODE_ENV === 'development' ? err.message : '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`
  üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}
  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å:
  - –õ–æ–∫–∞–ª—å–Ω–æ: http://localhost:${PORT}
  - –°—Ç–∞—Ç—É—Å API: http://localhost:${PORT}/api/status
  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: http://localhost:${PORT}/health
  `);
});